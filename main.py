import asyncio
import logging
import random
import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

import aiohttp

from db import *

from data import API_TOKEN, KINOPOISK_TOKEN

KP_TOKEN = KINOPOISK_TOKEN

err_phr = ['–£–ø—Å... —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç', '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∑–Ω–∞—é!', '–Ø –Ω–µ –∑–Ω–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É']

rand_phr = ['–í–æ—Ç —Ç–µ–±–µ —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:', '–ü–æ—Å–º–æ—Ç—Ä–∏ –≤–æ—Ç —ç—Ç–æ:', '–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–†–∞–Ω–¥–æ–º –µ—Å—Ç—å —Ä–∞–Ω–¥–æ–º, –ø—Ä–∏–¥–µ—Ç—Å—è —Å–º–æ—Ç—Ä–µ—Ç—å']
rand_mas = ['–û—Å—Ç—Ä–æ–≤ –ø—Ä–æ–∫–ª—è—Ç—ã—Ö', '–ü—Ä–µ—Å—Ç–∏–∂', '–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä', '–¢–∏—Ç–∞–Ω–∏–∫', '–•–∞—Ç–∏–∫–æ', '–°–º–µ—à–∞—Ä–∏–∫–∏', '–ù–∞—á–∞–ª–æ', '–î–æ–≤–æ–¥', '–ú–∏—Å—Å–∏—è –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º–∞', '–ù–∞–∑–∞–¥ –≤ –±—É–¥—É—â–µ–µ']

ikb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ë—É–¥—É —Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="like_random_film"),
     InlineKeyboardButton(text="–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", callback_data="dislike_random_film"),
     InlineKeyboardButton(text="–£–∂–µ —Å–º–æ—Ç—Ä–µ–ª", callback_data="already_watch")],
])

GENRE_OPTIONS: list[tuple[str, str]] = [
    ("–õ—é–±–æ–π", "any"),
    ("–ö–æ–º–µ–¥–∏—è", "–∫–æ–º–µ–¥–∏—è"),
    ("–î—Ä–∞–º–∞", "–¥—Ä–∞–º–∞"),
    ("–ë–æ–µ–≤–∏–∫", "–±–æ–µ–≤–∏–∫"),
    ("–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"),
    ("–¢—Ä–∏–ª–ª–µ—Ä", "—Ç—Ä–∏–ª–ª–µ—Ä"),
    ("–ú—É–ª—å—Ç—Ñ–∏–ª—å–º", "–º—É–ª—å—Ç—Ñ–∏–ª—å–º"),
    ("–ö—Ä–∏–º–∏–Ω–∞–ª", "–∫—Ä–∏–º–∏–Ω–∞–ª"),
    ("–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"),
    ("–£–∂–∞—Å—ã", "—É–∂–∞—Å—ã"),
]

def build_genre_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for text, key in GENRE_OPTIONS:
        kb.button(text=text, callback_data=f"rndg:{key}")
    kb.adjust(3)
    return kb.as_markup()

logging.basicConfig(level=logging.INFO)

bot = Bot(API_TOKEN)
dp = Dispatcher()

class FavMovie(StatesGroup):
    waiting_for_title = State()

@dp.message(Command(commands = ['start','Start']))
async def start_handler(message: types.Message, state: FSMContext, pool: asyncpg.Pool):
    async with pool.acquire() as conn:
        await conn.execute(UPDATE_USER, message.from_user.id, message.from_user.username)
    await state.set_state(FavMovie.waiting_for_title)
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫–æ–π —Ç–≤–æ–π –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º?')

@dp.message(Command(commands = ['set_film', 'Set_film']))
async def fav_handler(message: types.Message, state: FSMContext):
    await state.set_state(FavMovie.waiting_for_title)
    await message.answer("–ö–∞–∫–æ–π —Ç–≤–æ–π –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º?")

@dp.message(Command(commands=['favorite_film', 'Favorite_film']))
async def fav_handler(message: types.Message, pool: asyncpg.Pool):
    async with pool.acquire() as conn:
        row = await conn.fetchrow(GET_FAVORITE, message.from_user.id)
    fav = row["favorite_movie"] if row and row["favorite_movie"] else None
    await message.answer(f"–¢–≤–æ–π –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º: {fav}" if fav else "–ï—â—ë –Ω–µ –∑–∞–¥–∞–Ω")


def kp_pick_poster_url(m: dict) -> str | None:
    poster = m.get("poster") or {}
    return poster.get("url")

def kp_movie_caption(m: dict) -> str:
    title = m.get("name") or m.get("alternativeName") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    year = m.get("year") or ""
    rating = m.get("rating") or {}
    kp = rating.get("kp") if isinstance(rating, dict) else rating
    description = m.get("shortDescription") or m.get("description") or "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    genres = ", ".join([g.get("name","") for g in (m.get("genres") or [])][:3]) or "‚Äî"
    kp_id = m.get("id")
    return f"{title} ({year})\n–†–µ–π—Ç–∏–Ω–≥ KP: {kp or '‚Äî'}\n–ñ–∞–Ω—Ä—ã: {genres}\n\n{description}\n\n–ß—Ç–æ –¥—É–º–∞–µ—à—å?"

async def kp_random_movie_with_genre(session: aiohttp.ClientSession, genre_ru: str | None) -> dict | None:
    params = {
        "type": "movie",
        "notNullFields": "poster.url",
        "rating.kp": "6-10",
        "year": "1980-2025",
    }
    if genre_ru and genre_ru != "any":
        params["genres.name"] = genre_ru

    url = "https://api.kinopoisk.dev/v1.4/movie/random"
    for attempt in range(3):
        async with session.get(url, params=params) as r:
            if r.status == 429 and attempt < 2:
                await asyncio.sleep(0.8 * (attempt + 1))
                continue
            r.raise_for_status()
            return await r.json()
    return None



@dp.message(Command(commands = ['random_film', 'Random_film']))
async def rand_handler(message: types.Message): 
    await message.answer("–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞ üëá", reply_markup=build_genre_kb())

@dp.callback_query(F.data.startswith("rndg:"))
async def random_by_genre(cb: types.CallbackQuery):
    if not KP_TOKEN:
        await cb.message.answer(
            random.choice(rand_phr) + ' ' + random.choice(rand_mas),
            reply_markup=ikb
        )
        await cb.answer("API –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        return

    genre_key = cb.data.split(":", 1)[1]
    chosen_text = next((t for t, k in GENRE_OPTIONS if k == genre_key), "–õ—é–±–æ–π")
    await cb.message.edit_text(f"–ñ–∞–Ω—Ä: <b>{chosen_text}</b>\n–ò—â—É —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º‚Ä¶", parse_mode="HTML")

    async with aiohttp.ClientSession(
        timeout=aiohttp.ClientTimeout(total=10),
        headers={"X-API-KEY": KP_TOKEN}
    ) as session:
        try:
            movie = await kp_random_movie_with_genre(session, genre_key)
        except Exception:
            movie = None

    if not movie:
        await cb.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º –ø–æ–¥ —ç—Ç–æ—Ç –∂–∞–Ω—Ä. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä üôÇ",
                                reply_markup=build_genre_kb())
        await cb.answer()
        return

    poster = kp_pick_poster_url(movie)
    caption = kp_movie_caption(movie)
    try:
        if poster:
            await cb.message.answer_photo(photo=poster, caption=caption, reply_markup=ikb)
        else:
            await cb.message.answer(caption, reply_markup=ikb)
    except Exception:
        await cb.message.answer(caption, reply_markup=ikb)
    await cb.answer()
# async def rand_handler(message: types.Message):
#     if not KP_TOKEN:
#         print('error with connection to kp')
#         await message.answer(
#             random.choice(rand_phr) + ' ' + random.choice(rand_mas),
#             reply_markup=ikb
#         )
#         return
#     async with aiohttp.ClientSession(
#         timeout=aiohttp.ClientTimeout(total=10),
#         headers={"X-API-KEY": KP_TOKEN}
#     ) as session:
#         try:
#             movie = await kp_random_movie(session)
#         except Exception as e:
#             await message.answer(
#                 random.choice(rand_phr) + ' ' + random.choice(rand_mas),
#                 reply_markup=ikb
#             )
#             return
#     if not movie:
#         await message.answer(
#             random.choice(rand_phr) + ' ' + random.choice(rand_mas),
#             reply_markup=ikb
#         )
#         return
#     poster = kp_pick_poster_url(movie)
#     caption = kp_movie_caption(movie)
#     if poster:
#         try:
#             await message.answer_photo(photo=poster, caption=caption, reply_markup=ikb)
#             return
#         except Exception:
#             pass
#     await message.answer(caption, reply_markup=ikb)
    

@dp.message(Command(commands=['info','Info']))
async def info_handler(message: types.Message):
    await message.answer("–û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ - –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤, –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ - SavraSSS\n2025")

@dp.message(F.text.startswith("/"))
async def catch_any_command(message: types.Message):
    await message.answer(random.choice(err_phr))
    await message.answer(f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É –≤–º–µ—Å—Ç–æ {message.text}")

@dp.message(FavMovie.waiting_for_title, F.text)
async def process_fav(message: types.Message, state: FSMContext, pool: asyncpg.Pool):
    title = message.text.strip()
    if title == '–ë—É–∫–∏–Ω—ã' or title == '–±—É–∫–∏–Ω—ã' or title == '–°–º–µ—à–∞—Ä–∏–∫–∏' or title == '—Å–º–µ—à–∞—Ä–∏–∫–∏':
        await message.answer(f"–û–û–û, {title} 10/10")
    elif title[0] != '/':
        async with pool.acquire() as conn:
            status = await conn.execute(SET_FAVORITE, message.from_user.id, title)
        print(status)
        await message.answer(f"–ó–∞–ø–æ–º–Ω–∏–ª —Ç–≤–æ–π –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º: {title}")
    else:
        await message.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–æ –Ω–µ —Ñ–∏–ª—å–º")
    await state.clear()


@dp.message()
async def update_handler(message: types.Message):
    await message.answer('–ó–¥–∞—Ä–æ–≤–∞')


@dp.callback_query()
async def callbacks_handler(callback: types.CallbackQuery):
    if callback.data == "like_random_film":
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer("–û—Ç–ª–∏—á–Ω–æ")
    elif callback.data == "dislike_random_film":
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer("–ñ–∞–ª—å, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
    elif callback.data == "already_watch":
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer("–û –∫–∞–∫, –º–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å")


async def main():
    pool = await asyncpg.create_pool('postgresql://bot:0109@localhost:5432/cinemabot', min_size=1, max_size=5)

    async with pool.acquire() as conn:
        await conn.execute(CREATE_USERS_SQL)

    dp["pool"] = pool
    async with bot:
        await bot.delete_webhook(drop_pending_updates=True)
        me = await bot.get_me()
        logging.info(f"Bot started as @{me.username}")
        try:
            await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
        finally:
            await pool.close()


if __name__ == "__main__":
    asyncio.run(main())